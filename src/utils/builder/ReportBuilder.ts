import { AbstractReportModel } from '../../models/AbstractReportModel';
import { NullReportModel } from '../../models/NullReportModel';
import { ReportModel } from '../../models/ReportModel';
import { Autonumberer } from '../Autonumberer';

export class ReportBuilder {
    constructor() {}

    /**
     * Builds a ReportModel from a dictionary of results generated by the analyzer strategy.
     * @param content The dictionary of results.
     * @returns The built AbstractReportModel.
     */
    public build(content: {}): AbstractReportModel {
        if (
            content === null ||
            content === undefined ||
            Object.keys(content).length === 0
        ) {
            return new NullReportModel();
        }

        return new ReportModel(
            Autonumberer.getInstance().generateNext() as string,
            content,
        );
    }

    /**
     * Builds a ReportModel from elements extracted from an XML file.
     * @param id The ID of the report.
     * @param results The XML elements containing the report data.
     * @returns The built AbstractReportModel.
     */
    public buildFrom(id: string, results: Element): AbstractReportModel {
        const loadedResults: { [key: string]: { [key: string]: number } } =
            this.buildResultDictionary(results);
        return new ReportModel(id, loadedResults);
    }

    /**
     * Formats the results from the XML file into a dictionary for use in the ReportModel.
     * @param results The XML elements containing the report data.
     * @returns The formatted dictionary of results.
     */
    public buildResultDictionary(results: Element): {
        [key: string]: { [key: string]: number };
    } {
        const extractValue = (
            section: Element,
            tag: string,
            defaultValue: number = -1,
        ): number => {
            const element = section.getElementsByTagName(tag)[0];
            return element ? Number(element.textContent) : defaultValue;
        };

        const pubicEl = results.getElementsByTagName('pubicSymphysis')[0];
        const sternalEl = results.getElementsByTagName('sternalEnd')[0];
        const auricularEl = results.getElementsByTagName('auricularSurface')[0];
        const thirdMolarEl = results.getElementsByTagName('thirdMolar')[0];

        return {
            pubicSymphysis: {
                L: extractValue(pubicEl, 'L'),
                L_min: extractValue(pubicEl, 'L_min'),
                L_max: extractValue(pubicEl, 'L_max'),
                R: extractValue(pubicEl, 'R'),
                R_min: extractValue(pubicEl, 'R_min'),
                R_max: extractValue(pubicEl, 'R_max'),
                C: extractValue(pubicEl, 'C'),
                C_min: extractValue(pubicEl, 'C_min'),
                C_max: extractValue(pubicEl, 'C_max'),
            },
            sternalEnd: {
                L: extractValue(sternalEl, 'L'),
                L_min: extractValue(sternalEl, 'L_min'),
                L_max: extractValue(sternalEl, 'L_max'),
                R: extractValue(sternalEl, 'R'),
                R_min: extractValue(sternalEl, 'R_min'),
                R_max: extractValue(sternalEl, 'R_max'),
                C: extractValue(sternalEl, 'C'),
                C_min: extractValue(sternalEl, 'C_min'),
                C_max: extractValue(sternalEl, 'C_max'),
            },
            auricularSurface: {
                L: extractValue(auricularEl, 'L'),
                L_min: extractValue(auricularEl, 'L_min'),
                L_max: extractValue(auricularEl, 'L_max'),
                R: extractValue(auricularEl, 'R'),
                R_min: extractValue(auricularEl, 'R_min'),
                R_max: extractValue(auricularEl, 'R_max'),
                C: extractValue(auricularEl, 'C'),
                C_min: extractValue(auricularEl, 'C_min'),
                C_max: extractValue(auricularEl, 'C_max'),
            },
            thirdMolar: {
                TL: extractValue(thirdMolarEl, 'TL'),
                TR: extractValue(thirdMolarEl, 'TR'),
                BL: extractValue(thirdMolarEl, 'BL'),
                BR: extractValue(thirdMolarEl, 'BR'),
            },
        };
    }
}
